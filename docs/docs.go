// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticate a user and return a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "User login details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.LoginRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created - User logged successfully"
                    },
                    "400": {
                        "description": "Bad request - Invalid input"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token"
                    },
                    "404": {
                        "description": "Not Found - Resource not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register with new user with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.RegisterRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created - User registered successfully"
                    },
                    "400": {
                        "description": "Bad request - Invalid input"
                    },
                    "409": {
                        "description": "Conflict - user already exists"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/products": {
            "get": {
                "description": "Retrieve a list of products with optional pagination. Returns a collection of product attributes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get List of Products",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cursor for pagination",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok - Successfully retrieved all products"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "description": "Add products and return id products",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Add product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Add product details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.AddProductPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created - Product added successfully"
                    },
                    "400": {
                        "description": "Bad request - Invalid input"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token"
                    },
                    "403": {
                        "description": "Forbidden access - access not allowed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/products/sku/{sku}": {
            "get": {
                "description": "Retrieve detailed information about a specific product using its SKU. Returns attributes of the product.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get Product Details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sku products",
                        "name": "sku",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok - Successfully retrieved the product details"
                    },
                    "404": {
                        "description": "Not Found - Resource not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/transactions/checkout": {
            "post": {
                "description": "Process a checkout transaction, reducing stock levels and creating an order record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Checkout transation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Add transaction details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.AddTransactionPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created - Transaction added successfully"
                    },
                    "400": {
                        "description": "Bad request - Invalid input"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token"
                    },
                    "403": {
                        "description": "Forbidden access - access not allowed"
                    },
                    "404": {
                        "description": "Not Found - Resource not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/transactions/history": {
            "get": {
                "description": "Retrieve a list of history transactions. Returns a collection of transactions attributes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "History transation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok - Successfully retrieved transaction histories"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "request.AddProductPayload": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "sabun"
                },
                "price": {
                    "type": "integer",
                    "example": 2500
                },
                "stock": {
                    "type": "integer",
                    "example": 25
                }
            }
        },
        "request.AddTransactionPayload": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer",
                    "example": 7
                },
                "product_sku": {
                    "type": "string",
                    "example": "3f369638-de78-4c6e-8e99-2f5507d346c7"
                }
            }
        },
        "request.LoginRequestPayload": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user123@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "supersecret123"
                }
            }
        },
        "request.RegisterRequestPayload": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user123@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "supersecret123"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:9000",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Go online shop api",
	Description:      "This is a simple API for an online shop with go, providing functionalities like product management, order processing, and user management.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
